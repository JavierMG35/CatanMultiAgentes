<!--
	<H3>The blackjack Manager helps with starting agents.</H3>

	Provides a GUI to start/stop agents, and close the complete BlackJack application.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-0.96.xsd"
	name="Manager"
	package="Manager">

	<imports>
		<import>src.Jugador.*</import>
		<import>src.Tablero.*</import>
		<import>Manager.beliefs.*</import>
		<import>Manager.plans.*</import>
		<import>java.awt.Color</import>
		<import>jadex.runtime.*</import>
		<import>jadex.planlib.*</import>
		<import>jadex.util.*</import>
		<import>jadex.adapter.fipa.AgentIdentifier</import>
		<import>jadex.adapter.fipa.SFipa</import>
		<import>java.util.logging.*</import>
	</imports>

	<capabilities>
		<!-- this capability provides easy access to "out-of-the-box"-plans
			 allowing - for example - to register at the DF. -->
		<capability name="dfcap" file="jadex.planlib.DF"/>
		<!-- Capability to start other agents. -->
		<capability name="amscap" file="jadex.planlib.AMS"/>
	</capabilities>

	<beliefs>

		<!-- The player objects with initial values. -->
		<beliefset name="jugadores" class="src.Jugador.Jugador">
			<fact>new Jugador("Javier", "RutaComercial")</fact>
			<fact>new Jugador("Joselu", "Caballer√≠a")</fact>
			<fact>new Jugador("Victor", "Puertos")</fact>
			<fact>new Jugador("Pablo", "Monopolio")</fact>
	    </beliefset>

		<!-- The id of a manually started local dealer. -->
		<belief name="localDealerAID"  class="AgentIdentifier" />

		<!-- The gui object.
		<belief name="gui" class="ManagerFrame"/>
-->
	</beliefs>

	<goals>
		<!-- Used to find other agents.-->
		<achievegoalref name="ams_search_agents">
			<concrete ref="amscap.ams_search_agents"/>
		</achievegoalref>
		<!-- Used to search for the dealer. -->
		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search"/>
		</achievegoalref>
		<!-- Used to start other agents.-->
		<achievegoalref name="ams_create_agent">
			<concrete ref="amscap.ams_create_agent"/>
		</achievegoalref>
		<!-- Used to stop other agents.-->
		<achievegoalref name="ams_destroy_agent">
			<concrete ref="amscap.ams_destroy_agent"/>
		</achievegoalref>
	</goals>

	<plans>
		<!-- Plan to register, when dealer belief changes. -->
		<plan name="dealerRegister">
			<body class="src.Manager.ManagerTableroRegisterPlan" />
			<!-- <body>new ManagerDealerRegisterPlan()</body> -->
			<trigger>
				<beliefchange ref="localDealerAID"/>
			</trigger>
		</plan>
		<!-- Plan to update the GUI, when informed by dealer changes.
		<plan name="guiManager">
			<body>new ManagerGuiUpdatePlan()</body>
		<body>new ManagerGuiUpdatePlan()</body>
			<trigger>
				<messageevent ref="inform_playerplaying"/>
			</trigger>
		</plan> -->
	</plans>

	<events>
		<!-- Message to be sent to shutdown the dealer. -->
		<messageevent name="dealer_shutdown" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="content" class="String" direction="fixed">
				<value>"manager:shutDown"</value>
			</parameter>
		</messageevent>
		<!-- Message to be sent to register at the dealer. -->
		<messageevent name="dealer_register" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.QUERY_REF</value>
			</parameter>
			<parameter name="content" class="String" direction="fixed">
				<value>"manager:registerAsTracker"</value>
			</parameter>
		</messageevent>
		<!-- Message sent by dealer to inform the manager about the status of a player. -->
		<messageevent name="inform_playerplaying" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="content-start" class="String" direction="fixed">
				<value>"playerPlaying"</value>
			</parameter>
		</messageevent>
	</events>

	<!--
	     logging-properties, needed to debug the application.
	     Start the Jadex-Logging-Agent to see whats going on behind
	     the scenes
	 -->
	<properties>
		<property name="logging.level">Level.WARNING</property>
<!--	<property name="debugging">true</property> -->
	</properties>
<!--
	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="gui">
					<fact>new ManagerFrame($scope.getExternalAccess())</fact>
				</initialbelief>
			</beliefs>
		</configuration>
	</configurations>
-->

</agent>
